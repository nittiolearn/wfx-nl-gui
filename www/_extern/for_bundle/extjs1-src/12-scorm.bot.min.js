
var SCOBotUtil=function(){"use strict";var version="1.0.4",createDate="07/23/2013 03:23PM",modifiedDate="01/03/2015 14:12PM",isReady=false,types=["Boolean","Number","String","Function","Array","Date","RegExp","Object"],class_types=[],toString=Object.prototype.toString,hasOwn=Object.prototype.hasOwnProperty,h='HTMLEvents',k='KeyboardEvent',m='MouseEvents',eventTypes={load:h,unload:h,abort:h,error:h,select:h,change:h,submit:h,reset:h,focus:h,blur:h,resize:h,scroll:h,input:h,keyup:k,keydown:k,click:m,dblclick:m,mousedown:m,mouseup:m,mouseover:m,mousemove:m,mouseout:m,contextmenu:m},defaults={clientX:0,clientY:0,button:0,ctrlKey:false,altKey:false,shiftKey:false,metaKey:false,bubbles:true,cancelable:true,view:document.defaultView,key:'',location:0,modifiers:'',repeat:0,locale:''},initializers={HTMLEvents:function(el,name,event,o){return event.initEvent(name,o.bubbles,o.cancelable);},CustomEvent:function(el,name,event,o){return event.initCustomEvent(name,o.bubbles,o.cancelable,o.detail);}},eventSplitter=/\s+/,len=types.length,self=this,checkLoaded=function(h){if(isReady){return;}
try{document.documentElement.doScroll("left");}catch(e){setTimeout(function(){checkLoaded(h);},0);return;}
h();},type=function(o){return o==null?String(o):class_types[toString.call(o)]||"object";},isWindow=function(o){return o!=null&&o===o.window;},isElement=function(o){return(typeof HTMLElement==="object"?o instanceof HTMLElement:o&&typeof o==="object"&&o!==null&&o.nodeType===1&&typeof o.nodeName==="string");},isPlainObject=function(o){if(type(o)!=="object"||o.nodeType||isWindow(o)){return false;}
return!(o.constructor&&!hasOwn.call(o.constructor.prototype,"isPrototypeOf"));},isArray=function(o){return(o instanceof Array)||(toString.apply(o)==='[object Array]');},isFunction=function(o){return type(o)==="function";},extend=function(o){var i=1,args=arguments,olen=args.length,key;while(i<olen){for(key in args[i]){if(args[i].hasOwnProperty(key)){args[0][key]=args[i][key];}}
i+=1;}
return args[0];},addEvent=function(target,event,handler){if(event.indexOf(' ')>=0){var events=event.split(' '),elen=events.length;while(elen--){addEvent(target,events[elen],handler);}}else{if(target===window||isElement(target)){if(target.addEventListener){if(event==="loaded"){event="DOMContentLoaded";}
target.addEventListener(event,handler,false);}else{if(event==="loaded"){event="onreadystatechange";document.attachEvent(event,function(){if(document.readyState==="complete"){document.detachEvent("onreadystatechange",target);isReady=true;handler();}});if(document.documentElement.doScroll&&window===window.top){checkLoaded(handler);}}else{target.attachEvent('on'+event,handler);}}}else{extend(target,Events);target.on(event,handler);}}},calcAverage=function(num_arr){var sum=0,i=0,nlen=num_arr.length;while(i<nlen){sum+=num_arr[i].lat;i+=1;}
sum=sum/len;return sum.toFixed(2);},triggerEvent=function(target,name,options){var doc=document,event,etype,attr;options=options||{};for(attr in defaults){if(defaults.hasOwnProperty(attr)){if(!options.hasOwnProperty(attr)){options[attr]=defaults[attr];}}}
if(isWindow(target)||isElement(target)){if(doc.createEvent){etype=eventTypes[name]||'CustomEvent';event=doc.createEvent(etype);initializers[etype](target,name,event,options);try{target.dispatchEvent(event);}catch(ignore){}}else{event=doc.createEventObject();target.fireEvent('on'+etype,event);}}else{try{target.trigger(name,options);}catch(ignore){}}},triggerEvents=function(events,args){var ev,i=-1,l=events.length,a1=args[0],a2=args[1],a3=args[2],al=args.length;switch(al){case 0:while(++i<l){ev=events[i];ev.callback.call(ev.ctx);}
return;case 1:while(++i<l){ev=events[i];ev.callback.call(ev.ctx,a1);}
return;case 2:while(++i<l){ev=events[i];ev.callback.call(ev.ctx,a1,a2);}
return;case 3:while(++i<l){ev=events[i];ev.callback.call(ev.ctx,a1,a2,a3);}
return;default:while(++i<l){ev=events[i];ev.callback.apply(ev.ctx,args);}
return;}},eventsApi=function(obj,action,name,rest){var key,i,l;if(!name){return true;}
if(typeof name==='object'){for(key in name){if(name.hasOwnProperty(key)){obj[action].apply(obj,[key,name[key]].concat(rest));}}
return false;}
if(eventSplitter.test(name)){var names=name.split(eventSplitter);for(i=0,l=names.length;i<l;i++){obj[action].apply(obj,[names[i]].concat(rest));}
return false;}
return true;},Events={on:function(name,callback,context){if(!eventsApi(this,'on',name,[callback,context])||!callback)return this;this._events||(this._events={});var events=this._events[name]||(this._events[name]=[]);events.push({callback:callback,context:context,ctx:context||this});return this;},once:function(name,callback,context){if(!eventsApi(this,'once',name,[callback,context])||!callback)return this;var self=this;var once=_.once(function(){self.off(name,once);callback.apply(this,arguments);});once._callback=callback;return this.on(name,once,context);},off:function(name,callback,context){var retain,ev,events,names,i,l,j,k;if(!this._events||!eventsApi(this,'off',name,[callback,context]))return this;if(!name&&!callback&&!context){this._events=void 0;return this;}
names=name?[name]:_.keys(this._events);for(i=0,l=names.length;i<l;i++){name=names[i];if(events=this._events[name]){this._events[name]=retain=[];if(callback||context){for(j=0,k=events.length;j<k;j++){ev=events[j];if((callback&&callback!==ev.callback&&callback!==ev.callback._callback)||(context&&context!==ev.context)){retain.push(ev);}}}
if(!retain.length)delete this._events[name];}}
return this;},trigger:function(name,options){var args=[options],events,allEvents;if(!this._events){return this;}
if(!eventsApi(this,'trigger',name,args)){return this;}
events=this._events[name];allEvents=this._events.all;if(events){triggerEvents(events,args);}
if(allEvents){triggerEvents(allEvents,args);}
return this;},stopListening:function(obj,name,callback){var listeningTo=this._listeningTo;if(!listeningTo)return this;var remove=!name&&!callback;if(!callback&&typeof name==='object')callback=this;if(obj)(listeningTo={})[obj._listenId]=obj;for(var id in listeningTo){obj=listeningTo[id];obj.off(name,callback,this);if(remove||_.isEmpty(obj._events))delete this._listeningTo[id];}
return this;}};while(len--){var t=types[len];class_types["[object "+t+"]"]=t.toLowerCase();}
return{isWindow:isWindow,type:type,extend:extend,isPlainObject:isPlainObject,isArray:isArray,isFunction:isFunction,addEvent:addEvent,calcAverage:calcAverage,triggerEvent:triggerEvent,Events:Events};}();
function SCOBot_API_1484_11(options){"use strict";var Utl=SCOBotUtil,defaults={version:"4.1.5",createdate:"07/17/2010 08:15AM",moddate:"03/04/2016 12:24PM",prefix:"SCOBot_API_1484_11",errorCode:0,diagnostic:'',initialized:0,terminated:0,cmi:null,adl:null,CMI:{_version:"Local 1.0",comments_from_learner:{_children:"comment,location,timestamp",_count:"0"},comments_from_lms:{_children:"comment,location,timestamp",_count:"0"},completion_status:"unknown",completion_threshold:"0.7",credit:"no-credit",entry:"ab-initio",exit:"",interactions:{_children:"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description",_count:"0"},launch_data:"?name1=value1&name2=value2&name3=value3",learner_id:"100",learner_name:"Simulated User",learner_preference:{_children:"audio_level,language,delivery_speed,audio_captioning",audio_level:"1",language:"",delivery_speed:"1",audio_captioning:"0"},location:"",max_time_allowed:"",mode:"normal",objectives:{_children:"id,score,success_status,completion_status,description",_count:"0"},progress_measure:"",scaled_passing_score:"0.7",score:{_children:"scaled,raw,min,max",scaled:"",raw:"",min:"",max:""},session_time:"PT0H0M0S",success_status:"unknown",suspend_data:"",time_limit_action:"",total_time:"PT0H0M0S"},ADL:{nav:{request:"_none_",request_valid:{choice:{},continue:"false",previous:"false"}}}},settings=Utl.extend(defaults,options),cmi={},adl={},completion_status="|completed|incomplete|not attempted|unknown|",read_only="|_version|completion_threshold|credit|entry|launch_data|learner_id|learner_name|_children|_count|mode|maximum_time_allowed|scaled_passing_score|time_limit_action|total_time|comment|",write_only="|exit|session_time|",exit="|time-out|suspend|logout|normal||",nav_states="|_none_|continue|previous|choice|exit|exitAll|abandon|abandonAll|suspendAll",errors={0:"No error",101:"General exception",102:"General Initialization Failure",103:"Already Initialized",104:"Content Instance Terminated",111:"General Termination Failure",112:"Termination Before Initialization",113:"Termination After Termination",122:"Retrieve Data Before Initialization",123:"Retrieve Data After Termination",132:"Store Data Before Initialization",133:"Store Data After Termination",142:"Commit Before Initialization",143:"Commit After Termination",201:"General Argument Error",301:"General Get Failure",351:"General Set Failure",391:"General Commit Failure",401:"Undefined Data Model",402:"Unimplemented Data Model Element",403:"Data Model Element Value Not Initialized",404:"Data Model Element Is Read Only",405:"Data Model Element Is Write Only",406:"Data Model Element Type Mismatch",407:"Data Model Element Value Out Of Range",408:"Data Model Dependency Not Established"},self=this;function throwVocabError(k,v){settings.diganostic="The "+k+" of "+v+" must be a proper vocabulary element.";settings.errorCode=406;return'false';}
function throwUnimplemented(key){settings.errorCode=402;settings.diagnostic='The value for key '+key+' has not been created yet.';return'false';}
function throwGeneralSetError(k,v,o){settings.errorCode="351";settings.diagnostic="The "+k+" element must be unique.  The value '"+v+"' has already been set in #"+o;return'false';}
function setData(key,val,obj){var ka=key.split(/\./);if(ka.length<2){obj[ka[0]]=val;}else{if(!obj[ka[0]]){obj[ka[0]]={};}
obj=obj[ka.shift()];setData(ka.join("."),val,obj);}}
function getData(key,obj){var ka=key.split(/\./),v;if(ka.length<2){try{return obj[ka[0]];}catch(e){throwUnimplemented(key);return'false';}}else{v=ka.shift();if(obj[v]){return String(getData(ka.join("."),obj[v]));}
return throwUnimplemented(key);}}
function cmiGetValue(key){var r="false";switch(key){case"cmi.exit":case"cmi.session_time":settings.errorCode=405;settings.diagnostic="Sorry, this has been specified as a read-only value for "+key;break;default:r=getData(key.substr(4,key.length),cmi);if(r==='undefined'){settings.errorCode=401;settings.diagnostic="Sorry, there was a undefined response from "+key;r="false";}
break;}
scorm.debug(settings.prefix+": GetValue "+key+" = "+r,4);return r;}
function adlGetValue(key){var r="false";if(key.indexOf('adl.nav.request_valid.choice')>=0){settings.errorCode=301;scorm.debug(settings.prefix+"Sorry, targeted 'choice' requests not allowed by this API since there is no navigation.",2);}else{r=getData(key.substr(4,key.length),adl);if(r==='undefined'){settings.errorCode=401;settings.diagnostic="Sorry, there was a undefined response from "+key;r="false";}}
scorm.debug(settings.prefix+": GetValue "+key+" = "+r,4);return r;}
function isReadOnly(key){var tiers=key.split('.'),v=tiers[tiers.length-1];if(tiers[2]==="request_valid"||tiers[4]==='id'){return true;}
if(tiers[1]==='comments_from_lms'){return true;}
if(tiers[1]==='comments_from_learner'){return false;}
return read_only.indexOf('|'+v+'|')>=0;}
function isWriteOnly(key){var tiers=key.split("."),v=tiers[tiers.length-1];return write_only.indexOf('|'+v+'|')>=0;}
function roundVal(v){var dec=2;return Math.round(v*Math.pow(10,dec))/Math.pow(10,dec);}
function getObjLength(obj){var name,length=0;for(name in obj){if(obj.hasOwnProperty(name)){length+=1;}}
return length;}
function checkExitType(){if(cmi.exit==="suspend"){cmi.entry="resume";}}
function suspendDataUsageStatistic(){return roundVal((cmi.suspend_data.length/64000)*100)+"%";}
this.isRunning=function(){return settings.initialized===1&&settings.terminated===0;};this.Initialize=function(){scorm.debug(settings.prefix+":  Initializing...",3);if(settings.cmi!==null){cmi=settings.cmi;checkExitType();}else{cmi=settings.CMI;}
if(settings.adl!==null){adl=settings.adl;}else{adl=settings.ADL;}
settings.initialized=1;settings.terminated=0;return'true';};this.GetValue=function(key){settings.errorCode=0;var r="false",k=key.toString(),tiers=[];if(this.isRunning()){if(isWriteOnly(k)){scorm.debug(settings.prefix+": This "+k+" is write only",4);settings.errorCode=405;return"false";}
tiers=k.toLowerCase().split(".");switch(tiers[0]){case"cmi":r=cmiGetValue(k);break;case"ssp":break;case"adl":r=adlGetValue(k);break;}
if(r===""){settings.errorCode=403;}
return r;}
settings.errorCode=123;return r;};this.SetValue=function(key,value){scorm.debug(settings.prefix+": SetValue: "+key+" = "+value,4);settings.errorCode=0;var tiers=[],k=key.toString(),v=value.toString(),z=0,count=0,arr=[];if(this.isRunning()){if(isReadOnly(k)){scorm.debug(settings.prefix+": This "+k+" is read only",4);settings.errorCode=404;settings.diagnostic="This namespace is read-only.";return"false";}
tiers=k.split(".");switch(tiers[0]){case"cmi":switch(key){case"cmi.location":if(v.length>1000){scorm.debug(settings.prefix+": Some LMS's might truncate your bookmark as you've passed "+v.length+" characters of bookmarking data",2);}
break;case"cmi.completion_status":if(completion_status.indexOf('|'+v+'|')===-1){return throwVocabError(key,v);}
break;case"cmi.exit":if(exit.indexOf('|'+v+'|')===-1){return throwVocabError(key,v);}
break;default:switch(tiers[1]){case"comments_from_lms":settings.errorCode="404";settings.diagnostic="The cmi.comments_from_lms element is entirely read only.";return'false';case"comments_from_learner":if(cmi.comments_from_learner._children.indexOf(tiers[3])===-1){return throwVocabError(key,v);}
setData(k.substr(4,k.length),v,cmi);cmi.comments_from_learner._count=(getObjLength(cmi.comments_from_learner)-2).toString();return'true';case"interactions":if(cmi.interactions._children.indexOf(tiers[3])===-1){return throwVocabError(key,v);}
cmi.interactions._count=(getObjLength(cmi.interactions)-2).toString();if(isNaN(parseInt(tiers[2],10))){return'false';}
if(!Utl.isPlainObject(cmi.interactions[tiers[2]])){if(tiers[3]==="id"){cmi.interactions[tiers[2]]={};setData(k.substr(4,k.length),v,cmi);cmi.interactions._count=(getObjLength(cmi.interactions)-2).toString();if(!Utl.isPlainObject(cmi.interactions[tiers[2]].objectives)){scorm.debug(settings.prefix+": Constructing objectives object for new interaction",4);cmi.interactions[tiers[2]].objectives={};cmi.interactions[tiers[2]].objectives._count="-1";}
if(!Utl.isPlainObject(cmi.interactions[tiers[2]].correct_responses)){scorm.debug(settings.prefix+": Constructing correct responses object for new interaction",4);cmi.interactions[tiers[2]].correct_responses={};cmi.interactions[tiers[2]].correct_responses._count="-1";}
return'true';}
scorm.debug("Can't add interaction without ID first!",3);return'false';}
if(tiers[3]==='objectives'){if(tiers[5]==="id"){count=parseInt(cmi.interactions[tiers[2]].objectives._count,10);z=count;while(z<count){if(cmi.interactions[tiers[2]].objectives[z].id===v){return throwGeneralSetError(key,v,z);}
z+=1;}}else{return throwVocabError(key,v);}
setData(k.substr(4,k.length),v,cmi);cmi.interactions[tiers[2]].objectives._count=(getObjLength(cmi.interactions[tiers[2]].objectives)-1).toString();return'true';}
if(tiers[3]==='correct_responses'){setData(k.substr(4,k.length),v,cmi);cmi.interactions[tiers[2]].correct_responses._count=(getObjLength(cmi.interactions[tiers[2]].correct_responses)-1).toString();}
setData(k.substr(4,k.length),v,cmi);cmi.interactions._count=(getObjLength(cmi.interactions)-2).toString();return'true';case"objectives":if(tiers[3]==="id"){count=parseInt(cmi.objectives._count,10);while(z<count){if(cmi.objectives[z].id===v){settings.errorCode="351";settings.diagnostic="The objectives.id element must be unique.  The value '"+v+"' has already been set in objective #"+z;return'false';}
z+=1;}}
if(tiers[3]!=="id"){arr=parseInt(tiers[2],10);if(cmi.objectives[arr]===undefined){settings.errorCode="408";settings.diagnostic="The objectives.id element must be set before other elements can be set";return'false';}}
if(isNaN(parseInt(tiers[2],10))){return'false';}
setData(k.substr(4,k.length),v,cmi);cmi.objectives._count=(getObjLength(cmi.objectives)-2).toString();return'true';}
break;}
setData(k.substr(4,k.length),v,cmi);break;case"ssp":break;case"adl":if(key.indexOf('adl.nav.request_valid.choice')>=0){settings.errorCode="404";settings.diagnostic="The requested namespace is read-only.";return'false';}
switch(key){case"adl.nav.request":if(nav_states.indexOf('|'+v+'|')===-1){settings.errorCode="406";settings.diagnostic="The requested namespace value did not match any allowed states.";return'false';}
break;case"adl.nav.request_valid.continue":case"adl.nav.request_valid.previous":settings.errorCode="404";settings.diagnostic="The requested namespace is read-only.";return'false';default:if(tiers[1]!=="nav"){settings.errorCode="351";settings.diagnostic="The requested namespace does not exist.";return'false';}
break;}
setData(k.substr(4,k.length),v,adl);break;}
return"true";}
if(settings.terminated){settings.errorCode=133;}else{settings.errorCode=132;}
return"false";};this.Commit=function(){scorm.debug(settings.prefix+": Commit called.\nSuspend Data Usage "+suspendDataUsageStatistic(),4);Utl.triggerEvent(self,'StoreData',{name:'StoreData',runtimedata:cmi,sequence:adl});return'true';};this.Terminate=function(){settings.terminated=1;settings.initialized=0;return'true';};this.GetErrorString=function(param){if(param!==""){var nparam=parseInt(param,10);if(errors[nparam]!==undefined){return errors[nparam];}}
return"";};this.GetLastError=function(){return settings.errorCode;};this.GetDiagnostic=function(){return settings.diagnostic;};}
function SCOBotBase(options){"use strict";var Utl=SCOBotUtil,defaults={version:"4.1.5",createDate:"04/05/2011 08:56AM",modifiedDate:"03/04/2016 12:24AM",debug:false,isActive:false,throw_alerts:false,preferred_API:"findAPI",prefix:"SCOBotBase",exit_type:"suspend",success_status:"unknown",use_standalone:true,standalone:false,completion_status:"incomplete",time_type:"UTC",cmi:null,latency_arr:[]},settings=Utl.extend(defaults,options),isError=0,error={0:"No Error",404:"Not Found",405:"Prevented on a read only resource"},API={connection:false,version:"none",mode:"",path:false,data:{completion_status:settings.completion_status,success_status:settings.success_status,exit_type:settings.exit_type},isActive:settings.isActive},self=this;settings.error=error;settings.startDate={};function noconsole(msg,lvl){Utl.triggerEvent(self,debug,{msg:msg,lvl:lvl});}
function debug(msg,lvl){if(settings.debug){if(!window.console){window.console={};window.console.info=noconsole;window.console.log=noconsole;window.console.warn=noconsole;window.console.error=noconsole;window.console.trace=noconsole;}
switch(lvl){case 1:console.error(msg);break;case 2:console.warn(msg);break;case 4:console.info(msg);break;case 3:console.log(msg);break;default:console.log(msg);return false;}
return true;}
if(lvl<3&&settings.throw_alerts){alert(msg);}
return true;}
function findSCORM2004(win){var attempts=0,limit=500;while((!win.API_1484_11)&&(win.parent)&&(win.parent!==win)&&(attempts<=limit)){attempts+=1;win=win.parent;}
if(win.API_1484_11){API.version="2004";API.path=win.API_1484_11;}else{return false;}
return true;}
function findSCORM12(win){var attempts=0,limit=500;while((!win.API)&&(win.parent)&&(win.parent!==win)&&(attempts<=limit)){attempts+=1;win=win.parent;}
if(win.API){API.version="1.2";API.path=win.API;}else{return false;}
return true;}
function findAPI(win){if(settings.preferred_API==="findAPI"){var attempts=0,limit=500;while((!win.API&&!win.API_1484_11)&&(win.parent)&&(win.parent!==win)&&(attempts<=limit)){attempts+=1;win=win.parent;}
if(win.API_1484_11){API.version="2004";API.path=win.API_1484_11;}else if(win.API){API.version="1.2";API.path=win.API;}else{return false;}
return true;}
if(settings.preferred_API==="findSCORM12"){return findSCORM12(win);}
return findSCORM2004(win);}
function centisecsToISODuration(n,bPrecise){var str="P",nCs=Math.max(n,0),nY=0,nM=0,nD=0,nH,nMin;nCs=Math.round(nCs);if(bPrecise===true){nD=Math.floor(nCs/8640000);}else{nY=Math.floor(nCs/3155760000);nCs-=nY*3155760000;nM=Math.floor(nCs/262980000);nCs-=nM*262980000;nD=Math.floor(nCs/8640000);}
nCs-=nD*8640000;nH=Math.floor(nCs/360000);nCs-=nH*360000;nMin=Math.floor(nCs/6000);nCs-=nMin*6000;if(nY>0){str+=nY+"Y";}
if(nM>0){str+=nM+"M";}
if(nD>0){str+=nD+"D";}
if((nH>0)||(nMin>0)||(nCs>0)){str+="T";if(nH>0){str+=nH+"H";}
if(nMin>0){str+=nMin+"M";}
if(nCs>0){str+=(nCs/100)+"S";}}
if(str==="P"){str="PT0H0M0S";}
return str;}
function centisecsToSCORM12Duration(n){var nH=Math.floor(n/360000),nCs=n-nH*360000,nM=Math.floor(nCs/6000),nS,str;nCs=nCs-nM*6000;nS=Math.floor(nCs/100);nCs=Math.floor(nCs-nS*100);if(nH>9999){nH=9999;}
str="0000"+nH+":";str=str.substr(str.length-5,5);if(nM<10){str+="0";}
str+=nM+":";if(nS<10){str+="0";}
str+=nS;if(nCs>0){str+=".";if(nCs<10){str+="0";}
str+=nCs;}
return str;}
function ISODurationToCentisec(str){var aV=[0,0,0,0,0,0],bErr=(str.indexOf("P")!==0),bTFound=false,aT=["Y","M","D","H","M","S"],p=0,i=0,len;if(!bErr){str=str.substr(1);len=aT.length;i=0;while(i<len){if(str.indexOf("T")===0){str=str.substr(1);i=Math.max(i,3);bTFound=true;}
p=str.indexOf(aT[i]);if(p>-1){if((i===1)&&(str.indexOf("T")>-1)&&(str.indexOf("T")<p)){continue;}
if(aT[i]==="S"){aV[i]=parseFloat(str.substr(0,p));}else{aV[i]=parseInt(str.substr(0,p),10);}
if(isNaN(aV[i])){bErr=true;break;}
if((i>2)&&(!bTFound)){bErr=true;break;}
str=str.substr(p+1);}
i+=1;}
bErr=!((!bErr)&&(len!==0));}
if(bErr){return 0;}
return aV[0]*3155760000+aV[1]*262980000
+aV[2]*8640000+aV[3]*360000+aV[4]*6000
+Math.round(aV[5]*100);}
function padTime(n){return n<10?'0'+n:n;}
function scorm12toMS(n){var t_arr=n.split(":");return Math.round(t_arr[0]*3600000)+(t_arr[1]*60000)+(t_arr[2]*1000);}
function dateToscorm12Time(date){var h=date.getHours(),m=date.getMinutes(),s=date.getSeconds();return padTime(h)+":"+padTime(m)+":"+padTime(s);}
function isoDateToStringUTC(d){return d.getUTCFullYear()+'-'+padTime(d.getUTCMonth()+1)+'-'+padTime(d.getUTCDate())+'T'+padTime(d.getUTCHours())+':'+padTime(d.getUTCMinutes())+':'+padTime(d.getUTCSeconds())+"."+Math.round((d.getUTCMilliseconds()/1000)%1000)+'Z';}
function isoDateToString(d){var offset=d.getTimezoneOffset()>0?'-':'+';return d.getFullYear()+'-'+padTime(d.getMonth()+1)+'-'+padTime(d.getDate())+'T'+padTime(d.getHours())+':'+padTime(d.getMinutes())+':'+padTime(d.getSeconds())+"."+Math.round((d.getMilliseconds()/1000)%1000)+offset+padTime(d.getTimezoneOffset()/60)+':00';}
function isoStringToDate(str){var MM=["January","February","March","April","May","June","July","August","September","October","November","December"],d,uoffset,offset=0,mil=0,dd,timebits,m,resultDate,utcdate,offsetMinutes;switch(settings.time_type){case"UTC":timebits=/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\.[0-9]*)?)?(?:([+\-])([0-9]{2})([0-9]{2}))?/;m=timebits.exec(str);if(m){utcdate=Date.UTC(parseInt(m[1],10),parseInt(m[2],10)-1,parseInt(m[3],10),parseInt(m[4],10),parseInt(m[5],10),((m[6]&&parseInt(m[6],10))||0),((m[7]&&parseFloat(m[7])*1000))||0);if(m[9]&&m[10]){offsetMinutes=parseInt(m[9],10)*60+parseInt(m[10],10);utcdate+=(m[8]==='+'?-1:+1)*offsetMinutes*60000;}
resultDate=new Date(utcdate);}else{resultDate=null;}
return resultDate;case"GMT":d=str.replace(/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})(?:\.(\d+))([\+|\-]\d+:\d+)/,function($0,$Year,$Month,$Day,$Hour,$Min,$Sec,$Ms,$Offset){offset=parseInt($Offset.substring(1,$Offset.length),10)*60;mil=$Ms;return MM[$Month-1]+" "+$Day+", "+$Year+" "+$Hour+":"+$Min+":"+$Sec;});dd=new Date(d);uoffset=dd.getTimezoneOffset();if(uoffset!==offset){dd=new Date(dd.getTime()+(offset-uoffset)*60000);dd.setMilliseconds(mil);}
return dd;default:d=str.replace(/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})/,function($0,$Year,$Month,$Day,$Hour,$Min,$Sec){return MM[$Month-1]+" "+$Day+", "+$Year+" "+$Hour+":"+$Min+":"+$Sec;});dd=new Date(d);return dd;}}
function makeBoolean(str){if(str===undefined){debug(settings.prefix+" : makeBoolean was given empty string, converting to false",2);return false;}
if(str===true||str===false){return Boolean(str);}
switch(str.toLowerCase()){case"true":case"yes":case"1":return true;case"false":case"no":case"0":case null:return false;default:return Boolean(str);}}
function triggerWarning(n){debug(error[n],2);return true;}
function triggerException(msg){Utl.triggerEvent(self,'exception',{'error':msg});}
function getLastErrorCode(){var lms=API.path,code=0;if(lms){switch(API.version){case"1.2":code=parseInt(lms.LMSGetLastError(),10);break;case"2004":code=parseInt(lms.GetLastError(),10);break;default:break;}}
return code;}
function getLastErrorMessage(n){var lms=API.path,result='No LMS Connectivity';if(lms){switch(API.version){case"1.2":result=lms.LMSGetErrorString(n.toString());break;case"2004":result=lms.GetErrorString(n.toString());break;default:break;}}
return String(result);}
function getDiagnostic(n){var lms=API.path,result='No LMS Connectivity';if(lms){switch(API.version){case"1.2":result=lms.LMSGetDiagnostic(n.toString());break;case"2004":result=lms.GetDiagnostic(n.toString());break;default:break;}}
return String(result);}
this.getvalue=function(n){var v=null,lms=API.path,ec=0,m='',d='',nn=null,tiers=[],ig=false,start=new Date(),end;if(API.isActive){switch(API.version){case"1.2":switch(n){case"cmi.comments_from_lms._count":case"cmi.comments_from_lms._children":case"cmi.comments_from_learner._count":case"cmi.comments_from_learner._children":case"cmi.score.scaled":case"cmi.progress_measure":case"cmi.completion_threshold":ig=true;break;case"cmi.credit":nn="cmi.core.credit";break;case"cmi.location":nn="cmi.core.lesson_location";break;case"cmi.entry":nn="cmi.core.entry";break;case"cmi.mode":nn="cmi.core.lesson_mode";break;case"cmi.exit":nn="cmi.core.exit";break;case"cmi.score.raw":nn="cmi.core.score.raw";break;case"cmi.score.min":nn="cmi.core.score.min";break;case"cmi.score.max":nn="cmi.core.score.max";break;case"cmi.scaled_passing_score":nn="cmi.student_data.mastery_score";break;case"cmi.max_time_allowed":nn="cmi.student_data.max_time_allowed";break;case"cmi.time_limit_action":nn="cmi.student_data.time_limit_action";break;case"cmi.learner_id":nn="cmi.core.student_id";break;case"cmi.learner_name":nn="cmi.core.student_name";break;case"cmi.learner_preferences.audio_level":nn="cmi.student_preferences.audio";break;case"cmi.learner_preferences.delivery_speed":nn="cmi.student_preferences.speed";break;case"cmi.learner_preferences.language":nn="cmi.student_preferences.language";break;case"cmi.learner_preferences.audio_captioning":nn="cmi.student_preferences.text";break;case"cmi.success_status":case"cmi.completion_status":nn="cmi.core.lesson_status";break;case"cmi.session_time":nn="cmi.core.session_time";break;case"cmi.total_time":nn="cmi.core.total_time";break;default:tiers=n.split(".");if(tiers[1]==="interactions"){switch(tiers[2]){case"_children":case"_count":break;default:if(!isNaN(parseInt(tiers[2],10))){switch(tiers[3]){case"objectives":case"correct_responses":break;default:scorm.debug(settings.prefix+": Requesting cmi.interactions."+tiers.join(".")+" is a write-only value.  Please check your code.",2);return'false';}}}}
if(tiers[1]==="objectives"){switch(tiers[2]){case"_children":case"_count":break;default:switch(tiers[3]){case"id":case"status":break;case"success_status":case"completion_status":tiers[3]='status';break;case"progress_measure":case"description":ig=true;break;case"score":if(tiers[4]==="scaled"){ig=true;}
break;default:scorm.debug(settings.prefix+": Unexpected namespace passed in '"+n+"', please verify your code.",2);break;}
break;}
nn=tiers.join(".");}else{nn=n;}
break;}
if(ig){return'false';}
v=lms.LMSGetValue(nn);break;case"2004":v=lms.GetValue(n);break;default:break;}
ec=getLastErrorCode();m=getLastErrorMessage(ec);d=getDiagnostic(ec);Utl.triggerEvent(self,'getvalue',{'n':n,'v':v,'error':{'code':ec,'message':m,'diagnostic':d}});end=new Date();settings.latency_arr.push({lat:Number(end)-Number(start),v:n});if(ec===0||ec===403){if(v==='undefined'||v===null||v==='null'){v="";}
if(API.version==="1.2"){if(v==="0000:00:00.0"){v='';}}
return String(v);}
debug(settings.prefix+": Error\nError Code: "+ec+"\nError Message: "+m+"\nDiagnostic: "+d,1);return'false';}
debug(settings.prefix+": "+n+" Get Aborted, connection not initialized! "+API.isActive,2);return'false';};this.setvalue=function(n,v){var s='false',lms=API.path,ec=0,m='',d='',tiers=[],nn=null,ig=false;if(API.isActive){switch(API.version){case"1.2":API.mode=API.mode===""?lms.LMSGetValue('cmi.core.lesson_mode'):API.mode;switch(n){case"adl.nav.request":case"adl.nav.request_valid.continue":case"adl.nav.request_valid.previous":case"adl.nav.request_valid.choice":case"cmi.score.scaled":case"cmi.progress_measure":ig=true;break;case"cmi.comments_from_learner.comment":if(v.length>4096){debug(settings.prefix+": Warning, the comment is over the limit!!",2);}
nn="cmi.comments";break;case"cmi.location":if(v.length>255){debug(settings.prefix+": Warning, your bookmark is over the limit!!",2);}
nn="cmi.core.lesson_location";break;case"cmi.mode":nn="cmi.core.lesson_mode";break;case"cmi.exit":nn="cmi.core.exit";if(v==="normal"){v="";}
API.exit_type=v;break;case"cmi.score.raw":nn="cmi.core.score.raw";break;case"cmi.score.min":nn="cmi.core.score.min";break;case"cmi.score.max":nn="cmi.core.score.max";break;case"cmi.success_status":case"cmi.completion_status":nn="cmi.core.lesson_status";if(v==="unknown"||v==="not attempted"){ig=true;}
API.data.completion_status=v;break;case"cmi.scaled_passing_score":nn="cmi.student_data.mastery_score";break;case"cmi.learner_preferences.audio_level":nn="cmi.student_preferences.audio";break;case"cmi.learner_preferences.delivery_speed":nn="cmi.student_preferences.speed";break;case"cmi.learner_preferences.language":nn="cmi.student_preferences.language";break;case"cmi.learner_preferences.audio_captioning":nn="cmi.student_preferences.text";break;case"cmi.session_time":nn="cmi.core.session_time";break;case"cmi.total_time":nn="cmi.core.total_time";break;case"cmi.suspend_data":if(v.length>4096){debug(settings.prefix+": Warning, your suspend data is over the limit!!",2);}
nn=n;break;default:tiers=n.split(".");switch(tiers[1]){case"comments_from_learner":switch(tiers[3]){case"location":case"timestamp":return'false';}
break;case"interactions":if(tiers[2]==='false'){scorm.debug(settings.prefix+": Developer, the interaction count was 'false', and I'm stopping you from pushing this against the LMS.  Verify the code getting interaction count.",2);return'false';}
switch(tiers[3]){case"timestamp":tiers[3]="time";break;case"learner_response":tiers[3]="student_response";break;case"type":if(v==="long-fill-in"||v==="other"){scorm.debug(settings.prefix+": Developer, consider revising your recorded interactions.  SB.getAPIVersion() of '1.2' does not support type of "+v,2);}
break;case"result":if(v==="incorrect"){v="wrong";}
break;default:break;}
nn=tiers.join(".");break;case"objectives":switch(tiers[3]){case"id":break;case"status":case"success_status":case"completion_status":tiers[3]='status';if(v==="unknown"){v="not attempted";}
break;case"progress_measure":case"description":ig=true;break;case"score":if(tiers[4]==="scaled"){ig=true;}
break;default:scorm.debug(settings.prefix+": Unexpected value passed in '"+n+"', please verify your code.",2);break;}
nn=tiers.join(".");break;default:nn=n;break;}
break;}
if(ig){return'false';}
s=lms.LMSSetValue(nn,v);break;case"2004":API.mode=API.mode===""?lms.GetValue('cmi.mode'):API.mode;switch(n){case"cmi.location":if(v.length>1000){debug(settings.prefix+": Warning, your bookmark is over the limit!!",2);}
break;case"cmi.completion_status":API.data.completion_status=v;break;case"cmi.success_status":API.data.success_status=v;break;case"cmi.exit":API.data.exit_type=v;break;case"suspend_data":if(v.length>64000){debug(settings.prefix+": Warning, your suspend data is over the limit!!",2);}
break;default:break;}
s=lms.SetValue(n,v);if(API.mode!=="normal"){debug(settings.prefix+": Warning, you are not in normal mode.  The LMS may ignore 'SetValue' requests.",2);}
break;default:break;}
ec=getLastErrorCode();m=getLastErrorMessage(ec);d=getDiagnostic(ec);Utl.triggerEvent(self,'setvalue',{'n':n,'v':v,'error':{'code':ec,'message':m,'diagnostic':d}});if(ec===0||ec===403){return s;}
debug(settings.prefix+": Error\nError Code: "+ec+"\nError Message: "+getLastErrorMessage(ec)+" for "+n+"\nDiagnostic: "+getDiagnostic(ec),1);return s;}
debug(settings.prefix+": "+n+" Set Aborted, connection not initialized! Locate where you called it after you Terminated.",2);return'false';};this.commit=function(){var s='false',lms=API.path,ec=0,session_secs,saveDate=new Date(),lat=self.checkLatency(),speed=lat>0.40?"slow":"fast";debug(settings.prefix+" Tip: Current LMS Latency is "+lat+"ms which is "+speed+".");settings.latency_arr=[];session_secs=(saveDate.getTime()-settings.startDate.getTime())/1000;if(API.isActive){debug(settings.prefix+": Committing data",3);switch(API.version){case"1.2":self.setvalue("cmi.core.session_time",centisecsToSCORM12Duration(session_secs*100));s=lms.LMSCommit("");break;case"2004":self.setvalue("cmi.session_time",centisecsToISODuration(session_secs*100,true));s=lms.Commit("");break;default:break;}
ec=getLastErrorCode();if(ec===0){return s;}
debug(settings.prefix+": Error\nError Code: "+ec+"\nError Message: "+getLastErrorMessage(ec)+" for Commit.\nDiagnostic: "+getDiagnostic(ec),1);return'false';}
debug(settings.prefix+": Commit Aborted, connection not initialized!",2);return'false';};this.initialize=function(){debug(settings.prefix+": Initialize Called. \n\tversion: "+settings.version+"\n\tModified: "+settings.modifiedDate,3);var s=false,lms=API.path,ec=0;if(!API.isActive){if(lms){switch(API.version){case"1.2":s=makeBoolean(lms.LMSInitialize(""));break;case"2004":s=makeBoolean(lms.Initialize(""));break;default:break;}
ec=getLastErrorCode();debug('>>>>>>>>>>>>>>>>>>>>>>>>>>'+s+'>>>>>>>>>>>>>>>>>>>>>>>>',4);if(s&&ec===0){API.isActive=true;API.data.completion_status=self.getvalue('cmi.completion_status');settings.startDate=new Date();debug(settings.prefix+": SCO is initialized.",3);switch(API.data.completion_status){case"not attempted":case"unknown":self.setvalue("cmi.completion_status","incomplete");break;default:if(API.data.completion_status===''){triggerException("LMS compatibility issue, Please notify a administrator.  Completion Status is empty.");}
break;}
return'true';}
debug(settings.prefix+": Error\nError Code: "+ec+"\nError Message: "+getLastErrorMessage(ec)+" for Initialize.\nDiagnostic: "+getDiagnostic(ec),1);}else{debug(settings.prefix+": Aborted, LMS could not be located!.",2);}}else{debug(settings.prefix+": Aborted, connection already initialized!.",2);}
return'false';};this.terminate=function(){var s=false,lms=API.path,ec=0;debug(settings.prefix+": Terminating "+API.isActive+" "+lms,4);if(API.isActive){if(lms){debug(settings.prefix+": completion_status = "+API.data.completion_status+"|| success_status = "+API.data.success_status,3);self.commit();switch(API.version){case"1.2":s=lms.LMSFinish("");break;case"2004":s=lms.Terminate("");break;default:break;}
if(makeBoolean(s)){debug(settings.prefix+": Terminated.",3);Utl.triggerEvent(self,'terminated',{});API.isActive=false;}else{ec=getLastErrorCode();debug(settings.prefix+": Error\nError Code: "+ec+"\nError Message: "+getLastErrorMessage(ec)+" for Commit.\nDiagnostic: "+getDiagnostic(ec),1);}}else{debug(settings.prefix+": Lost connection to LMS",2);}}else{debug(settings.prefix+": Terminate Aborted, connection not initialized!",2);}
return s;};this.getObjectiveByID=function(id){var count=self.getvalue("cmi.objectives._count"),i,tID;scorm.debug(settings.prefix+": Set Objective - Begin search, Objective count is "+count,4);if(count===''||count==='false'||count==='-1'){return'false';}
count=parseInt(count,10)-1;i=count;while(i>=0){tID=self.getvalue("cmi.objectives."+i+".id");if(id===tID){scorm.debug(settings.prefix+": Objective ID Match on "+i,4);return i;}
i-=1;}
return'false';};this.getInteractionByID=function(id){var count=self.getvalue("cmi.interactions._count"),i,tID;if(count===""||count==='false'||count==='-1'){return'false';}
if(API.version==="1.2"){scorm.debug(settings.prefix+": Developer, consider ignoring these requests if SB.getAPIVersion is equal to 1.2",2);return count;}
count=parseInt(count,10)-1;scorm.debug(settings.prefix+": Getting interactions from count "+count,4);i=count;while(i>=0){tID=this.getvalue("cmi.interactions."+i+".id");if(id===tID){scorm.debug(settings.prefix+": Interaction By ID Returning "+i);return i;}
i-=1;}
return'false';};this.getInteractionObjectiveByID=function(n,id){var count=self.getvalue("cmi.interactions."+n+".objectives._count"),i,tID;if(count===""||count==='false'){return'0';}
if(API.version==="1.2"){scorm.debug(settings.prefix+": Developer, consider ignoring these requests if SB.getAPIVersion is equal to 1.2",2);return'false';}
count=parseInt(count,10)-1;scorm.debug(settings.prefix+": Getting interaction objectives from count "+count,4);i=count;while(i>=0){tID=self.getvalue("cmi.interactions."+n+".objectives."+i+".id");if(id===tID){scorm.debug(settings.prefix+": Interaction Objective By ID Returning "+i);return i;}
i-=1;}
return'false';};this.getInteractionCorrectResponsesByPattern=function(n,pattern){var count=self.getvalue("cmi.interactions."+n+".correct_responses._count"),i,p;if(count===""||count==='false'){scorm.debug(settings.prefix+": Correct Responses pattern was empty or false",4);return'0';}
count=parseInt(count,10)-1;scorm.debug(settings.prefix+": Getting interaction correct responses from count "+count,4);i=count;while(i>=0){p=self.getvalue("cmi.interactions."+n+".correct_responses."+i+".pattern");if(pattern===p){scorm.debug(settings.prefix+": Interaction Correct Responses By Pattern Returning "+i);return"match";}
i-=1;}
return'false';};this.init=function(){var win;try{win=window.parent;if(win&&win!==window){findAPI(window.parent);}}catch(e){debug(settings.prefix+" Possible Cross-domain issue/local mode (ignore).",2);}
if(!API.path){try{win=window.top.opener;findAPI(win);}catch(ee){debug(settings.prefix+" Possible Cross-domain issue/local mode (ignore).",2);}}
if(API.path){API.connection=true;return true;}
debug(settings.prefix+": I was unable to locate an API for communication",2);if(settings.use_standalone){debug(settings.prefix+": If you included Local_API_1484_11 I'll mimic the LMS.  If not, all SCORM calls will fail.",4);settings.standalone=true;API.version="2004";API.path=typeof SCOBot_API_1484_11==='function'?new SCOBot_API_1484_11({cmi:settings.cmi}):null;Utl.addEvent(API.path,'StoreData',function(e){Utl.triggerEvent(self,'StoreData',e);});return true;}
return false;};this.getLastError=function(){var ec=getLastErrorCode();return{code:ec,msg:getLastErrorMessage(ec),diag:getDiagnostic(ec)};};this.isLMSConnected=function(){return API.connection;};this.getAPIVersion=function(){return API.version;};this.isConnectionActive=function(){return API.isActive;};this.checkLatency=function(){Utl.calcAverage(settings.latency_arr);};this.set=function(n,v){switch(n){case"version":case"createDate":case"modifiedDate":case"prefix":triggerWarning(405);return false;case"isActive":API.isActive=v;settings[n]=v;break;case"startDate":settings[n]=new Date(v);break;default:settings[n]=v;break;}
return(isError!==0);};this.get=function(n){if(settings[n]===undefined){triggerWarning(404);return false;}
return settings[n];};this.centisecsToSCORM12Duration=centisecsToSCORM12Duration;this.centisecsToISODuration=centisecsToISODuration;this.ISODurationToCentisec=ISODurationToCentisec;this.isoDateToStringUTC=isoDateToStringUTC;this.isoDateToString=isoDateToString;this.isoStringToDate=isoStringToDate;this.scorm12toMS=scorm12toMS;this.dateToscorm12Time=dateToscorm12Time;this.makeBoolean=makeBoolean;this.debug=debug;this.init();}
function SCOBot(options){"use strict";var Utl=SCOBotUtil,defaults={version:"4.1.5",createDate:"04/07/2011 09:33AM",modifiedDate:"03/04/2016 12:23AM",prefix:"SCOBot",launch_data:{},interaction_mode:"state",launch_data_type:"querystring",initiate_timer:true,scorm_strict:true,scorm_edition:"3rd",scorm_status_persist:"success_status",useJSONSuspendData:true,suspend_data:{pages:[]},base64:false,happyEnding:true,doNotStatusUntilFinish:false,sequencing:{nav:{request:'_none_'}},location:"",mode:"",scaled_passing_score:0.7,completion_threshold:0,max_time_allowed:'',totalInteractions:0,totalObjectives:0,startTime:0},settings=Utl.extend(defaults,options),buffer={success_status:'',completion_status:'',completion_threshold:settings.completion_threshold,progress_measure:'0',scaled_passing_score:settings.scaled_passing_score,score:{scaled:'0',raw:'0',min:'0',max:'0'}},lmsconnected='false',isError=false,isStarted=false,happyEndingRequest=false,SCOBotManagedStatus=false,badValues='|null|undefined|false|NaN|| |',error=scorm.get('error'),self=this;function triggerWarning(n){scorm.debug(error[n],2);return true;}
function triggerException(msg){Utl.triggerEvent(self,'exception',{error:msg});}
function initSCO(){lmsconnected=scorm.initialize();scorm.debug(settings.prefix+": SCO Loaded from window.onload "+lmsconnected,4);if(lmsconnected==='true'){self.start();Utl.triggerEvent(self,"load");}else{var msg="Sorry, unable to initialize the SCORM Runtime API. Returned: "+lmsconnected;scorm.debug(settings.prefix+msg);triggerException(msg);}
return lmsconnected;}
function exitSCO(){scorm.debug(settings.prefix+": SCO is being unloaded, forcing exit ...",3);if(scorm.isConnectionActive()){Utl.triggerEvent(self,"unload");switch(scorm.get('exit_type')){case"finish":self.finish();break;case"suspend":self.suspend();break;case"timeout":self.timeout();break;default:scorm.debug(settings.prefix+": unknown exit type",2);break;}
scorm.debug(settings.prefix+": SCO is done unloading.",4);}
return true;}
function isBadValue(v){return badValues.indexOf('|'+v+'|')>=0;}
function cleanseData(str){var cleanseExp=/[^\f\r\n\t\v\0\s\S\w\W\d\D\b\\B\\cX\\xhh\\uhhh]/gi;return str.replace(cleanseExp,'');}
function isISO8601(v){var iso8601Exp;switch(scorm.get('time_type')){case"UTC":iso8601Exp=/^(\d{4})-0?(\d+)-0?(\d+)[T ]0?(\d+):0?(\d+):0?(\d+)(?:\.(\d+))(|Z)$/;break;case"GMT":iso8601Exp=/^(\d{4})-0?(\d+)-0?(\d+)[T ]0?(\d+):0?(\d+):0?(\d+)(?:\.(\d+))[\+\-]\d{2}:\d{2}$/;break;default:iso8601Exp=/^(\d{4})-0?(\d+)-0?(\d+)[T ]0?(\d+):0?(\d+):0?(\d+)$/;break;}
return iso8601Exp.test(v);}
function isISO8601Duration(v){var iso8601Dur=/^(?:P)([^T]*)(?:T)?(.*)?$/;return iso8601Dur.test(v);}
function notStartedYet(){scorm.debug(settings.prefix+": You didn't call 'start()' yet, or you already terminated, ignoring.",2);return'false';}
function currentTime(){return(new Date().getTime());}
function trueRound(v,dec){var num=parseFloat(v);return parseFloat(num.toPrecision(dec));}
function findResponseType(type,str){var reg;switch(type){case"order_matters":reg=/^\{order_matters=.*?\}/;break;case"case_matters":reg=/^\{case_matters=.*?\}/;break;case"lang":reg=/^\{lang=.*?\}/;break;default:scorm.debug(settings.prefix+": Sorry, this is not a valid Response type.",1);break;}
return reg.exec(str);}
function timesUp(){scorm.debug("Times Up!");var time_action=scorm.getvalue('cmi.time_limit_action').split(','),message=(time_action[1]==="message");if(message){Utl.triggerEvent(self,'message',{text:"Time Limit Exceeded"});}
scorm.set('exit_type',"timeout");if(time_action[0]==="exit"){exitSCO();}else{Utl.triggerEvent(self,'continue');}}
function encodeInteractionType(type,value){var str='',str2='',i=0,arr=[],arr2=[],len,index;switch(type){case'true-false':value=value.toString().toLowerCase();if(value==='true'||value==='false'){if(scorm.getAPIVersion()==="1.2"){return value.substring(0,1);}
return value;}
scorm.debug(settings.prefix+": Developer, you're not passing true or false for true-false.  I got "+value+" instead",1);return'';case'choice':if(scorm.getAPIVersion()==="1.2"){if(Utl.isArray(value)){if(value.length>26&&settings.scorm_strict){scorm.debug(settings.prefix+": Developer, you're passing a sum of values that exceeds SCORMs limit of 26 for this pattern.  Consider using 'performance' instead.",2);}
return value.join(",");}
scorm.debug(settings.prefix+": Developer, you're not passing a array type for sequencing/choice.  I got "+typeof value+" instead\n"+JSON.stringify(value),1);value='';}
case'sequencing':if(Utl.isArray(value)){index=0;if(value.length>36&&settings.scorm_strict){scorm.debug(settings.prefix+": Developer, you're passing a sum of values that exceeds SCORMs limit of 36 for this pattern.",2);value=value.slice(0,36);}
for(index in value){if(value.hasOwnProperty(index)){if(value[index].length>10&&settings.scorm_strict){scorm.debug(settings.prefix+": Developer, you're passing values that exceed SCORMs limit of 10 characters.  Yours have "+value[index].length+". I will truncate this as not to lose data.",2);value[index]=value[index].substring(0,10);}}}
str=scorm.getAPIVersion()==="1.2"?value.join(","):value.join("[,]");value=str;}else{scorm.debug(settings.prefix+": Developer, you're not passing a array type for sequencing/choice.  I got "+typeof value+" instead\n"+JSON.stringify(value),1);value='';}
return value;case'fill-in':if(Utl.isPlainObject(value)){if(value.case_matters!==undefined){str+="{case_matters="+value.case_matters+"}";}
if(value.order_matters!==undefined){str+="{order_matters="+value.order_matters+"}";}
if(value.lang!==undefined){str+="{lang="+value.lang+"}";}
if(Utl.isArray(value.words)){str+=value.words.join("[,]");}else{scorm.debug(settings.prefix+": Developer, expected an array of word(s) for fill-in.  I got "+typeof value.words+" instead",1);}
value=str;}else{scorm.debug(settings.prefix+": Developer, you're not passing a object type for fill in.  I got "+typeof value+" instead",1);value='';}
return value;case'long-fill-in':if(Utl.isPlainObject(value)){if(value.case_matters!==undefined){str+="{case_matters="+value.case_matters+"}";}
if(value.lang!==undefined){str+="{lang="+value.lang+"}";}
str+=value.text;value=str;}else{scorm.debug(settings.prefix+": Developer, you're not passing a object type for long fill in.  I got "+typeof value+" instead",1);value='';}
return value;case'matching':if(Utl.isArray(value)){len=value.length;i=0;while(i<len){if(Utl.isArray(value[i])){arr.push(scorm.getAPIVersion()==="1.2"?value[i].join("."):value[i].join("[.]"));}else{scorm.debug(settings.prefix+": Developer, you're not passing a array type for matching/performance.  I got "+typeof value+" instead",1);return'';}
i+=1;}
str=scorm.getAPIVersion()==="1.2"?arr.join(","):arr.join("[,]");value=str;}else{scorm.debug(settings.prefix+": Developer, you're not passing a array type for matching/performance.  I got "+typeof value+" instead",1);value='';}
return value;case'performance':if(!Utl.isArray(value)){if(value.order_matters!==undefined){str+="{order_matters="+value.order_matters+"}";}
if(Utl.isArray(value.answers)){len=value.answers.length;i=0;while(i<len){if(Utl.isArray(value.answers[i])){if(Utl.isPlainObject(value.answers[i][1])){arr2=[trueRound(value.answers[i][1].min,7),trueRound(value.answers[i][1].max,7)];str2=arr2.join("[:]");value.answers[i][1]=str2;}
arr.push(value.answers[i].join("[.]"));}else{scorm.debug(settings.prefix+": Developer, you're not passing a array type for performance correct response.  I got "+typeof(value.answers[i])+" instead on "+i,1);scorm.debug(value,1);return'';}
i+=1;}
str+=arr.join("[,]");}else{scorm.debug(settings.prefix+": Developer, you're not passing a array type for performance correct response.  I got "+typeof value.answers+" instead",1);scorm.debug(value,1);}}else{if(Utl.isArray(value)){len=value.length;i=0;while(i<len){if(Utl.isArray(value[i])){arr.push(value[i].join("[.]"));}else{scorm.debug(settings.prefix+": Developer, you're not passing a array type for performance learner response.  I got "+typeof value[i]+" instead on "+i,1);scorm.debug(value,1);return'';}
i+=1;}
str=arr.join("[,]");}else{scorm.debug(settings.prefix+": Developer, you're not passing a array type for performance learner response.  I got "+typeof value+" instead",1);value='';}}
value=str;return value;case'numeric':if(typeof value==="number"){str=''+value;}else if(Utl.isPlainObject(value)){arr=[trueRound(value.min,7),trueRound(value.max,7)];str=arr.join("[:]");}else{if(isNaN(value)){scorm.debug(settings.prefix+": Developer, your not passing a number for a numeric interaction.  I got "+value+" instead",1);}
str=value;}
return str;case'likert':case'other':return''+value;default:scorm.debug(settings.prefix+": Sorry, invalid interaction type detected for "+type+" on "+value,1);return false;}}
function decodeInteractionType(type,value){var i=0,arr=[],obj={},len,match=false;switch(type){case'true-false':if(scorm.getAPIVersion()==="1.2"){return value==="t"?"true":"false";}
return value;case'choice':case'sequencing':arr=value.split("[,]");value=arr;return value;case'fill-in':arr=findResponseType('case_matters',value);if(arr!==null){if(arr[0].search(/^\{case_matters=(true|false)\}$/)!==-1){obj.case_matters=arr[0].substring('{case_matters='.length,arr[0].length-1);value=value.substring(arr[0].length,value.length);scorm.debug("=== case matters"+value,4);}}
arr=findResponseType('order_matters',value);if(arr!==null){if(arr[0].search(/^\{order_matters=(true|false)\}$/)!==-1){obj.order_matters=arr[0].substring('{order_matters='.length,arr[0].length-1);value=value.substring(arr[0].length,value.length);scorm.debug("=== order matters"+value,4);}}
arr=findResponseType('lang',value);if(arr!==null){if(arr[0].search(/^\{lang=.*?\}$/)!==-1){obj.lang=arr[0].substring('{lang='.length,arr[0].length-1);value=value.substring(arr[0].length,value.length);}}
obj.words=value.split("[,]");return obj;case'long-fill-in':arr=findResponseType('case_matters',value);if(arr!==null){if(arr[0].search(/^\{case_matters=(true|false)\}$/)!==-1){obj.case_matters=arr[0].substring('{case_matters='.length,arr[0].length-1);value=value.substring(arr[0].length,value.length);scorm.debug("=== case matters"+value,4);}}
arr=findResponseType('lang',value);if(arr!==null){if(arr[0].search(/^\{lang=.*?\}$/)!==-1){obj.lang=arr[0].substring('{lang='.length,arr[0].length-1);value=value.substring(arr[0].length,value.length);}}
obj.text=value;return obj;case'matching':arr=value.split("[,]");len=arr.length;i=0;while(i<len){arr[i]=arr[i].split("[.]");i+=1;}
return arr;case'performance':arr=findResponseType('order_matters',value);if(arr!==null){if(arr[0].search(/^\{order_matters=(true|false)\}$/)!==-1){match=true;obj.order_matters=arr[0].substring('{order_matters='.length,arr[0].length-1);value=value.substring(arr[0].length,value.length);scorm.debug("=== order matters"+value,4);}}
arr=value.split("[,]");len=arr.length;i=0;while(i<len){arr[i]=arr[i].split("[.]");i+=1;}
if(match){obj.answers=arr;return obj;}
return arr;case'numeric':case'likert':case'other':return value;default:scorm.debug(settings.prefix+": Sorry, invalid interaction type detected for "+type+" on "+value,1);return false;}}
function setSuspendData(){var result,cleansedData=cleanseData(JSON.stringify(settings.suspend_data)),data=settings.base64?window.btoa(encodeURIComponent(cleansedData)):encodeURIComponent(cleansedData);result=scorm.setvalue('cmi.suspend_data',data);if(result==='true'){scorm.debug(settings.prefix+": Suspend Data saved",4);scorm.debug(settings.suspend_data,4);return'true';}
return'false';}
function checkProgress(){if(scorm.isConnectionActive()){var tmpRaw=0,totalObjectivesCompleted=0,i=0,count;buffer.completion_status=scorm.getvalue('cmi.completion_status');buffer.success_status=scorm.getvalue('cmi.success_status');buffer.score.raw=0;if(settings.totalInteractions===0||settings.totalObjectives===0){scorm.debug(settings.prefix+": Sorry, I cannot calculate Progress as the totalInteractions and or Objectives are zero",2);return'false';}
count=parseInt(scorm.getvalue('cmi.objectives._count'),10);scorm.debug(settings.prefix+": Objectives Count is "+count);if(count>0){count=count-1;i=count;while(i>=0){tmpRaw=parseFloat(scorm.getvalue('cmi.objectives.'+i+'.score.raw'));scorm.debug(settings.prefix+': Score Raw: '+tmpRaw);if(!isNaN(tmpRaw)){buffer.score.raw+=parseFloat(tmpRaw);}else{scorm.debug(settings.prefix+": We got a NaN converting objectives."+i+".score.raw.  This may be a global/local objective via the imsmanifest.xml.",2);}
if(scorm.getvalue('cmi.objectives.'+i+'.completion_status')==='completed'){totalObjectivesCompleted+=1;}
i-=1;}}
buffer.score.raw=''+buffer.score.raw;if((parseFloat(buffer.score.max)-parseFloat(buffer.score.min))===0){scorm.debug(settings.prefix+": Division by Zero for scoreMax - scoreMin "+buffer.score.max,2);buffer.score.scaled='1';}else{buffer.score.scaled=''+trueRound(((buffer.score.raw-buffer.score.min)/(buffer.score.max-buffer.score.min)),7);scorm.debug(settings.prefix+": Score Scaled = "+buffer.score.scaled,3);}
buffer.progress_measure=''+trueRound((totalObjectivesCompleted/settings.totalObjectives),7);buffer.completion_status=(parseFloat(buffer.progress_measure)>=parseFloat(buffer.completion_threshold))?'completed':'incomplete';scorm.debug(settings.prefix+": Pass/Fail check - Calculated scaled score:"+parseFloat(buffer.score.scaled)+" vs. "+parseFloat(buffer.scaled_passing_score),3);buffer.success_status=(parseFloat(buffer.score.scaled)>=parseFloat(buffer.scaled_passing_score))?'passed':'failed';if(!settings.doNotStatusUntilFinish){scorm.debug(settings.prefix+" Setting score immediately...",4);scorm.setvalue('cmi.score.raw',buffer.score.raw);scorm.setvalue('cmi.score.scaled',buffer.score.scaled);scorm.setvalue('cmi.progress_measure',buffer.progress_measure);scorm.setvalue('cmi.completion_status',buffer.completion_status);scorm.setvalue('cmi.success_status',buffer.success_status);}
return{score_scaled:buffer.score.scaled,success_status:buffer.success_status,progress_measure:buffer.progress_measure,completion_status:buffer.completion_status};}
return notStartedYet();}
function getCommentsFromLMS(){if(scorm.isConnectionActive()){var p1="cmi.comments_from_lms.",count=scorm.getvalue(p1+'_count'),response=[],obj={},i;if(!isBadValue(count)){return'false';}
count-=1;i=0;while(i<=count){p1+=i+'.';obj.comment=scorm.getvalue(p1+'comment');obj.location=scorm.getvalue(p1+'location');obj.timestamp=scorm.getvalue(p1+'timestamp');response.push(obj);obj={};i+=1;}
return response;}
return notStartedYet();}
function updateStatus(ending){if(ending&&SCOBotManagedStatus){scorm.debug(settings.prefix+": I am finishing... storing score on finish? "+settings.doNotStatusUntilFinish,3);if(settings.doNotStatusUntilFinish){scorm.setvalue('cmi.score.raw',buffer.score.raw);scorm.setvalue('cmi.score.scaled',buffer.score.scaled);scorm.setvalue('cmi.progress_measure',buffer.progress_measure);scorm.setvalue('cmi.completion_status',buffer.completion_status);return scorm.setvalue('cmi.success_status',buffer.success_status);}}
if(!happyEndingRequest){var ss='cmi.success_status',cs='cmi.completion_status',defss=scorm.get('success_status'),defcs=scorm.get('completion_status'),storss=self.getvalue(ss),storcs=self.getvalue(cs),isSuccessSet=false,isCompletionSet=false;if(storss==="passed"||storss==="failed"){isSuccessSet=true;}
if(storcs==="completed"||storcs==="incomplete"){isCompletionSet=true;}
if(scorm.get('exit_type')==='finish'||ending){if(storss!==defss&&!isSuccessSet){scorm.debug(settings.prefix+": Overriding default success status to "+defss,3);self.setvalue(ss,defss);}
if(scorm.getAPIVersion()==="1.2"&&settings.scorm_status_persist==="completion_status"&&!isCompletionSet){self.setvalue(cs,defcs);}else{if(storcs!==defcs&&!isCompletionSet){scorm.debug(settings.prefix+": Overriding default completion status to "+defcs,3);self.setvalue(cs,defcs);}}}}}
this.start=function(){var tmpLaunchData='',tmpCompletionThreshold='',tmpScaledPassingScore='',objectiveCountCheck;scorm.debug(settings.prefix+": I am starting...",3);if(!isStarted){isStarted=true;settings.startTime=currentTime();tmpLaunchData=scorm.getvalue('cmi.launch_data');if(settings.launch_data_type==="json"){settings.launch_data=JSON.parse(tmpLaunchData);}else{tmpLaunchData.replace(new RegExp("([^?=&]+)(=([^&]*))?","g"),function($0,$1,$2,$3){settings.launch_data[$1]=$3;});}
scorm.debug(settings.prefix+": Launch Data:",4);scorm.debug(settings.launch_data,4);settings.mode=scorm.getvalue('cmi.mode');settings.entry=scorm.getvalue('cmi.entry');if(settings.mode==="review"||settings.entry===''||settings.entry==='resume'){scorm.debug(settings.prefix+": Resuming...",4);settings.location=scorm.getvalue('cmi.location');settings.suspend_data=settings.base64?decodeURIComponent(window.atob(scorm.getvalue('cmi.suspend_data'))):decodeURIComponent(scorm.getvalue('cmi.suspend_data'));if(settings.suspend_data.length>0&&!isBadValue(settings.suspend_data)){scorm.debug(settings.prefix+": Returning suspend data object from a prior session",4);settings.suspend_data=settings.useJSONSuspendData?JSON.parse(settings.suspend_data):settings.suspend_data;scorm.debug(settings.suspend_data,4);if(settings.entry===""){settings.entry="resume";}}else{scorm.debug(settings.prefix+": Creating new suspend data object",4);}}else{scorm.debug(settings.prefix+": First time running this SCO based on LMS entry value.",4);scorm.debug(settings.prefix+": Creating new suspend data object",4);objectiveCountCheck=parseInt(scorm.getvalue('cmi.objectives._count'),10);if(objectiveCountCheck>0){scorm.debug(settings.prefix+": Warning, there are/is "+objectiveCountCheck+" objective(s) already present in this attempt!",2);}}
tmpCompletionThreshold=scorm.getvalue('cmi.completion_threshold');if(!isBadValue(tmpCompletionThreshold)&&tmpCompletionThreshold!=="-1"){buffer.completion_threshold=tmpCompletionThreshold;}
tmpScaledPassingScore=scorm.getvalue('cmi.scaled_passing_score');if(!isBadValue(tmpScaledPassingScore)&&tmpScaledPassingScore!=="-1"){if(parseFloat(tmpScaledPassingScore>1)){buffer.scaled_passing_score=''+((parseFloat(tmpScaledPassingScore)*10)/1000);}
settings.scaled_passing_score=buffer.scaled_passing_score;}
buffer.completion_status=scorm.getvalue('cmi.completion_status');buffer.success_status=scorm.getvalue('cmi.success_status');settings.comments_from_lms=getCommentsFromLMS();if(settings.comments_from_lms!=='false'){Utl.triggerEvent(self,'comments_lms',{data:settings.comments_from_lms});}
settings.max_time_allowed=scorm.getvalue('cmi.max_time_allowed');if(isISO8601Duration(settings.max_time_allowed)){if(settings.initiate_timer){scorm.debug(settings.prefix+": This SCO has a set time, I am starting the timer for "+settings.max_time_allowed+"...");self.startTimer();}}else{scorm.debug(settings.prefix+": This is not ISO8601 time duration. "+settings.max_time_allowed);}}else{scorm.debug(settings.prefix+": You already called start!  I don't see much point in doing this more than once.",2);return false;}
return true;};this.setTotals=function(data){SCOBotManagedStatus=true;if(scorm.isConnectionActive()){if(!isBadValue(data.totalInteractions)){settings.totalInteractions=data.totalInteractions;}
if(!isBadValue(data.totalObjectives)){settings.totalObjectives=data.totalObjectives;}
if(!isBadValue(data.scoreMin)){buffer.score.min=trueRound(data.scoreMin,7);scorm.setvalue('cmi.score.min',''+buffer.score.min);}
if(!isBadValue(data.scoreMax)){buffer.score.max=trueRound(data.scoreMax,7);scorm.setvalue('cmi.score.max',''+buffer.score.max);}
return'true';}
return notStartedYet();};this.startTimer=function(){var time=scorm.ISODurationToCentisec(settings.max_time_allowed)*10;if(time===0){scorm.debug(settings.prefix+"Recieved a zero duration.  Ignoring.",2);}else{setTimeout(timesUp,time);}};this.debug=scorm.debug;this.getvalue=scorm.getvalue;this.setvalue=scorm.setvalue;this.getMode=function(){if(scorm.isConnectionActive()){return settings.mode;}
return notStartedYet();};this.getEntry=function(){if(scorm.isConnectionActive()){return settings.entry;}
return notStartedYet();};this.setBookmark=function(v){if(scorm.isConnectionActive()){settings.location=''+v;return scorm.setvalue('cmi.location',settings.location);}
return notStartedYet();};this.getBookmark=function(){if(scorm.isConnectionActive()){return settings.location;}
return notStartedYet();};this.progress=checkProgress;this.setSuspendDataByPageID=function(id,title,data){if(scorm.isConnectionActive()){var i=0,len=settings.suspend_data.pages.length;while(i<len){if(settings.suspend_data.pages[i].id===id){settings.suspend_data.pages[i].data=data;scorm.debug(settings.prefix+": Suspend Data Set",4);scorm.debug(settings.suspend_data,4);return setSuspendData();}
i+=1;}
settings.suspend_data.pages.push({'id':id,'title':title,'data':data});scorm.debug(settings.prefix+": Suspend Data set:",4);scorm.debug(settings.suspend_data,4);return setSuspendData();}
return notStartedYet();};this.getSuspendDataByPageID=function(id){if(scorm.isConnectionActive()){var i=0,len=settings.suspend_data.pages.length;while(i<len){if(settings.suspend_data.pages[i].id===id){return settings.suspend_data.pages[i].data;}
i+=1;}
return'false';}
return notStartedYet();};this.getSecondsFromStart=function(){return settings.startTime-currentTime();};this.setInteraction=function(data){if(scorm.isConnectionActive()){var version=scorm.getAPIVersion(),n,m,i,j,p,p1='cmi.interactions.',p2,orig_timestamp=data.timestamp||scorm.isoStringToDate(scorm.getvalue(p1+scorm.getInteractionByID(data.id)+'.timestamp')),timestamp,latency,result,len,key;if(!Utl.isPlainObject(data)){scorm.debug(settings.prefix+": Developer, your not passing a {object} argument!!  Got "+typeof data+" instead.",1);return'false';}
if(isBadValue(data.id)){scorm.debug(settings.prefix+": Developer, your passing a interaction without a ID\nSee question:\n"+data.description,1);for(key in data){if(data.hasOwnProperty(key)){scorm.debug("key: "+key+"\n value: "+data[key]);}}
return'false';}
if(Utl.type(data.timestamp)==="date"){timestamp=scorm.getAPIVersion()==="1.2"?scorm.dateToscorm12Time(data.timestamp):scorm.isoDateToString(data.timestamp);}
data.timestamp=timestamp;if(Utl.type(data.latency)==="date"){latency=(data.latency.getTime()-orig_timestamp.getTime())*0.001;data.latency=scorm.getAPIVersion()==="1.2"?scorm.centisecsToSCORM12Duration(latency*100):scorm.centisecsToISODuration(latency*100,true);}else if(data.learner_response.length>0&&!isBadValue(data.learner_response)){data.latency=new Date();latency=(data.latency.getTime()-orig_timestamp.getTime())*0.001;data.latency=scorm.getAPIVersion()==="1.2"?scorm.centisecsToSCORM12Duration(latency*100):scorm.centisecsToISODuration(latency*100,true);}
p2='_count';if(settings.interaction_mode==="journaled"||version==="1.2"){n=scorm.getvalue(p1+p2)==="-1"?'0':scorm.getvalue(p1+p2);}else{n=scorm.getInteractionByID(data.id);if(isBadValue(n)){n=scorm.getvalue(p1+p2)==="-1"?'0':scorm.getvalue(p1+p2);}}
p1+=n+".";if(!isBadValue(data.id)){result=scorm.setvalue(p1+'id',data.id);}
if(!isBadValue(data.type)){if(scorm.getAPIVersion()==="1.2"){switch(data.type){case"other":case"long-fill-in":data.type="fill-in";break;default:break;}}
result=scorm.setvalue(p1+'type',data.type);}
p2='objectives._count';if(data.objectives!==undefined){i=0;len=data.objectives.length;while(i<len){m=scorm.getInteractionObjectiveByID(n,data.objectives[i].id);if(m==='false'){m=scorm.getvalue(p1+p2)==='-1'?'0':scorm.getvalue(p1+p2);}
result=scorm.setvalue(p1+'objectives.'+m+'.id',data.objectives[i].id);i+=1;}}
if(data.timestamp!==undefined){if(version!=="1.2"){result=scorm.setvalue(p1+'timestamp',data.timestamp);}else{result=scorm.setvalue(p1+'time',data.timestamp);}}
p2='correct_responses._count';if(Utl.isArray(data.correct_responses)){j=0;len=data.correct_responses.length;while(j<len){p=scorm.getInteractionCorrectResponsesByPattern(n,data.correct_responses[j].pattern);scorm.debug(settings.prefix+": Trying to locate pattern "+data.correct_responses[j].pattern+" resulted in "+p,4);if(p==='false'){p=scorm.getvalue(p1+p2)==='-1'?0:scorm.getvalue(p1+p2);scorm.debug(settings.prefix+": p is now "+p,4);}
if(p==="match"){scorm.debug(settings.prefix+": Developer, I've already added this correct response type '"+data.correct_responses[j].pattern+"'",2);}else{result=scorm.setvalue(p1+'correct_responses.'+p+'.pattern',encodeInteractionType(data.type,data.correct_responses[j].pattern));}
j+=1;}}else{scorm.debug(settings.prefix+": Something went wrong with Correct Responses, it wasn't an Array.",1);}
if(!isBadValue(data.weighting)){result=scorm.setvalue(p1+'weighting',data.weighting);}
if(!isBadValue(data.learner_response)){if(version!=="1.2"){result=scorm.setvalue(p1+'learner_response',encodeInteractionType(data.type,data.learner_response));}else{result=scorm.setvalue(p1+'student_response',encodeInteractionType(data.type,data.learner_response));}}
if(!isBadValue(data.result)){result=scorm.setvalue(p1+'result',data.result);}
if(!isBadValue(data.latency)){result=scorm.setvalue(p1+'latency',data.latency);}
if(version!=="1.2"){if(!isBadValue(data.description)){result=scorm.setvalue(p1+'description',data.description);}}
return result;}
return notStartedYet();};this.getInteraction=function(id){if(scorm.isConnectionActive()){var n,p1='cmi.interactions.',m,p,i=0,obj={},ts,ly,timestamp,latency;n=scorm.getInteractionByID(id);if(n==='false'){return n;}
p1+=n+'.';obj.id=id;obj.type=scorm.getvalue(p1+'type');m=scorm.getvalue(p1+'objectives._count');ts=scorm.getvalue(p1+'timestamp');ly=scorm.getvalue(p1+'latency');timestamp=(isISO8601(ts))?scorm.isoStringToDate(ts):ts;latency=(isISO8601(ly))?scorm.isoStringToDate(ly):ly;obj.objectives=[];if(m!=='false'){while(i<m){obj.objectives.push({id:scorm.getvalue(p1+'objectives.'+i+'.id')});i+=1;}}
obj.timestamp=timestamp;p=scorm.getvalue(p1+'correct_responses._count');obj.correct_responses=[];if(p!=='false'){i=0;while(i<p){obj.correct_responses.push({pattern:decodeInteractionType(obj.type,scorm.getvalue(p1+'correct_responses.'+i+'.pattern'))});i+=1;}}
obj.weighting=scorm.getvalue(p1+'weighting');obj.learner_response=decodeInteractionType(obj.type,scorm.getvalue(p1+'learner_response'));obj.result=scorm.getvalue(p1+'result');obj.latency=latency;obj.description=scorm.getvalue(p1+'description');return obj;}
return notStartedYet();};this.setObjective=function(data){if(scorm.isConnectionActive()){var p1='cmi.objectives.',n=scorm.getObjectiveByID(data.id),result='false',f=false,def1=": Passed no or bad ",def2=" ignored.",sv=scorm.setvalue,key,version=scorm.getAPIVersion();scorm.debug(settings.prefix+": Setting Objective at "+n+" (This may be false)");if(isBadValue(n)){n=scorm.getvalue(p1+'_count');if(n==='false'){scorm.debug(settings.prefix+": LMS is return false, can not proceed, check error codes");return n;}
scorm.debug(settings.prefix+": Objective "+data.id+" was not found.  Adding new at "+n+" "+data.description);f=true;}
p1+=n+'.';if(f){if(!isBadValue(data.id)){sv(p1+'id',''+data.id);}else{scorm.debug(settings.prefix+": You did not pass an objective ID!!  What I did get below:",1);for(key in data){if(data.hasOwnProperty(key)){scorm.debug("key: "+key+"\n value: "+data[key]);}}
return'false';}}
if(Utl.isPlainObject(data.score)){if(version==="2004"){result=!isBadValue(data.score.scaled)?sv(p1+'score.scaled',trueRound(data.score.scaled,7).toString()):scorm.debug(settings.prefix+def1+p1+"score.scaled: "+data.score.scaled+def2,3);}
result=!isBadValue(data.score.raw)?sv(p1+'score.raw',trueRound(data.score.raw,7).toString()):scorm.debug(settings.prefix+def1+p1+"score.raw: "+data.score.raw+def2,3);result=!isBadValue(data.score.min)?sv(p1+'score.min',trueRound(data.score.min,7).toString()):scorm.debug(settings.prefix+def1+p1+"score.min: "+data.score.min+def2,3);result=!isBadValue(data.score.max)?sv(p1+'score.max',trueRound(data.score.max,7).toString()):scorm.debug(settings.prefix+def1+p1+"score.max: "+data.score.max+def2,3);}else{scorm.debug(settings.prefix+": Did not receive a score object.  May or may not be an issue.",4);}
if(version==="2004"){result=!isBadValue(data.success_status)?sv(p1+'success_status',data.success_status):scorm.debug(settings.prefix+def1+p1+"success_status: "+data.success_status+def2,3);result=!isBadValue(data.completion_status)?sv(p1+'completion_status',data.completion_status):scorm.debug(settings.prefix+def1+p1+"completion_status: "+data.completion_status+def2,3);result=!isBadValue(data.progress_measure)?sv(p1+'progress_measure',data.progress_measure):scorm.debug(settings.prefix+def1+p1+"progress_measure: "+data.progress_measure+def2,3);result=!isBadValue(data.description)?sv(p1+'description',data.description):scorm.debug(settings.prefix+def1+p1+"description: "+data.description+def2,3);}else{result=!isBadValue(data[settings.scorm_status_persist])?sv(p1+'status',data[settings.scorm_status_persist]):scorm.debug(settings.prefix+def1+p1+"status: "+data[settings.scorm_status_persist]+def2,3);}
scorm.debug(settings.prefix+": Progress\n"+JSON.stringify(checkProgress(),null," "),4);return result.toString();}
return notStartedYet();};this.getObjective=function(id){if(scorm.isConnectionActive()){var n=scorm.getObjectiveByID(id),p1='cmi.objectives.';if(n==='false'){return n;}
p1+=n+".";return{id:scorm.getvalue(p1+"id"),score:{scaled:scorm.getvalue(p1+"score.scaled"),raw:scorm.getvalue(p1+"score.raw"),min:scorm.getvalue(p1+"score.min"),max:scorm.getvalue(p1+"score.max")},success_status:scorm.getvalue(p1+"success_status"),completion_status:scorm.getvalue(p1+"completion_status"),progress_measure:scorm.getvalue(p1+"progress_measure"),description:scorm.getvalue(p1+"description")};}
return notStartedYet();};this.setCommentFromLearner=function(msg,loc,date){if(scorm.isConnectionActive()){var p1="cmi.comments_from_learner.",n=scorm.getvalue(p1+"_count");if(n==='false'){scorm.debug(settings.prefix+": Sorry, LMS returned a comments count of 'false'.  Review error logs.");return n;}
if(msg.length===0||msg.length>4000){scorm.debug(settings.prefix+": Sorry, message from learner was empty or exceeded the limit. Length:"+msg.length,2);}
p1+=n+'.';scorm.setvalue(p1+'comment',msg);scorm.setvalue(p1+'location',loc);return scorm.setvalue(p1+'timestamp',scorm.isoDateToString(date));}
return notStartedYet();};this.gradeIt=function(){var scoreScaled=1,scoreRaw=scorm.getvalue('cmi.score.raw'),scoreMin=scorm.getvalue('cmi.score.min'),scoreMax=scorm.getvalue('cmi.score.max');if((scoreMax-scoreMin)===0){scorm.debug(settings.prefix+": Division by Zero for scoreMax - scoreMin "+scoreMax,2);scorm.setvalue('cmi.score.scaled',scoreScaled);}else{scoreScaled=''+((scoreRaw-scoreMin)/(scoreMax-scoreMin));scorm.debug(settings.prefix+": Score Scaled = "+scoreScaled,3);scorm.setvalue('cmi.score.scaled',trueRound(scoreScaled,7));}
if(buffer.completion_status!=="completed"){buffer.completion_status=(parseFloat(buffer.progress_measure)>=parseFloat(buffer.completion_threshold))?'completed':'incomplete';scorm.setvalue('cmi.completion_status',buffer.completion_status);}
if(buffer.success_status!=="passed"){buffer.success_status=(parseFloat(scoreScaled)>=parseFloat(buffer.scaled_passing_score))?'passed':'failed';}
scorm.setvalue('cmi.success_status',buffer.success_status);return'true';};this.happyEnding=function(){var activeConn=scorm.isConnectionActive();SCOBotManagedStatus=false;if(activeConn&&settings.happyEnding&&!settings.doNotStatusUntilFinish){happyEndingRequest=true;scorm.setvalue('cmi.score.scaled','1');scorm.setvalue('cmi.score.min','0');scorm.setvalue('cmi.score.max','100');scorm.setvalue('cmi.score.raw','100');scorm.setvalue('cmi.success_status','passed');scorm.setvalue('cmi.progress_measure','1');return scorm.setvalue('cmi.completion_status','completed');}
if(activeConn&&settings.happyEnding&&settings.doNotStatusUntilFinish){happyEndingRequest=true;buffer.score.scaled='1';buffer.score.raw='100';buffer.success_status='passed';buffer.completion_status='completed';buffer.progress_measure='1';scorm.setvalue('cmi.score.min','0');return scorm.setvalue('cmi.score.max','100');}
return notStartedYet();};this.commit=function(){if(scorm.isConnectionActive()){return scorm.commit('');}
return notStartedYet();};this.suspend=function(){if(scorm.isConnectionActive()){scorm.debug(settings.prefix+": I am suspending...",3);scorm.setvalue('cmi.exit','suspend');isStarted=false;return scorm.terminate();}
return notStartedYet();};this.finish=function(){if(scorm.isConnectionActive()){if(settings.sequencing.nav.request!=="_none_"){scorm.setvalue('adl.nav.request',settings.sequencing.nav.request);}
scorm.setvalue('cmi.exit','normal');updateStatus(true);isStarted=false;return scorm.terminate();}
return notStartedYet();};this.timeout=function(){if(scorm.isConnectionActive()){scorm.debug(settings.prefix+": I am timing out...",3);scorm.setvalue('cmi.exit','time-out');updateStatus(true);isStarted=false;return scorm.terminate();}
return notStartedYet();};this.isISO8601=isISO8601;this.getAPIVersion=scorm.getAPIVersion;this.set=function(n,v){switch(n){case"version":case"createDate":case"modifiedDate":case"prefix":case"scaled_passing_score":case"completion_threshold":triggerWarning(405);break;default:settings[n]=v;break;}
return(isError===false);};this.get=function(n){if(settings[n]===undefined){triggerWarning(404);return false;}
return settings[n];};Utl.addEvent(window,'loaded',initSCO);Utl.addEvent(window,'onbeforeunload',exitSCO);Utl.addEvent(window,'unload',exitSCO);Utl.addEvent(scorm,'exception',function(e){triggerException(e.error);});}